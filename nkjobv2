#! /usr/bin/env python3 
import re, os
import subprocess
import shutil
import logging
logger = logging.getLogger(__name__)
formatter = logging.Formatter('%(asctime)s: %(message)s')
# file_handler = logging.FileHandler('nujob.log')
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
# file_handler.setFormatter(formatter)
logger.addHandler(console_handler)
logger.setLevel(logging.INFO)
logger.info('Starting the script')

def generate_regex(input_text):
    # Split the input text into parts
    parts = re.split(r'(apk)', input_text)

    # Generate the regex
    regex = r'^'
    for part in parts:
        if part.isdigit():
            regex += r'([0-9]+)'
        elif part == 'apk':
            regex += r'(apk)'
        else:
            regex += r'(.*)'
    regex += r'$'

    return regex


def edit_nk_files(nk_file, kwargs):
    with open(nk_file, 'r') as file:
        content = file.read()
        for search_string, replacement in kwargs.items():
            content = content.replace(search_string, replacement)
        
    with open(nk_file, 'w') as file:
        file.write(content)


def create(prefix, match, entry, source_file, url, extension, user_input):
    if prefix:
        #  connect match.groups() to the logger
        try:
            logger.info(f"-----------------Processing {'_'.join(match.groups())}-----------------")
        except:
            logger.info(f"-----------------Processing {match}-----------------")
        # logger.info(f"Asset name: {prefix}")
        filename = entry
        # Construct the destination path based on the filename
        destination_path = f"./PROD/dev/{user_input}/{prefix}/{filename}/software/nuke/Scenes/".replace('\n', '')
        if not os.path.exists(destination_path):
            logger.info(f"Creating directory {destination_path}")
            try:
                subprocess.run(["mkdir", "-p", destination_path], check=True)
            except subprocess.CalledProcessError:
                logger.error(f"Error creating directory {destination_path}")
                exit(1)
        else:
            logger.info(f"Directory {destination_path} already exists")

        # Create the necessary directories if they don't exist
        # Copy the .nk file to the destination path
        try:
            logger.info(f"Copying {source_file} to {destination_path}")
            subprocess.run(["cp", source_file, destination_path], check=True)
        except subprocess.CalledProcessError:
            logger.error(f"Error copying {source_file} to {destination_path}")
            exit(1)
        # logger.info(f"Successfully copied {source_file} to {destination_path}")

        src = f"{destination_path}{source_file}".replace('\n', '')
        des = f"{destination_path}{filename}_comp_v000.nk".replace('\n', '')
        try:
            logger.info(f"Renaming {src} to {des}")
            subprocess.run(["mv", src, des], check=True)
        except subprocess.CalledProcessError:
            logger.error(f"Error renaming {src} to {des}")
            exit(1)
        # logger.info(f"Successfully renamed {src} to {des}")
        
        # Construct the replacement_string based on the destination path
        nk_file = f"{destination_path}{filename}_comp_v000.nk".replace('\n', '')
        extension = '.' + extension.lstrip('.').lower()
        replacement_string_ext = f"{url}{prefix}/{filename}/{filename}" + extension
        replacement_string_no_ext = f"{url}{prefix}/{filename}/{filename}"
        replacement_string = replacement_string_ext.replace('\n', '')

        directory = f"{url}{prefix}/{filename}".replace('\n', '')

        logger.info(f"Checking for files in the directory {directory}")
        try:
            first_file = subprocess.check_output(f"ls -1 {directory} | egrep '{filename}\\.[0-9]{{6}}\\.exr' | sort | head -1", shell=True, stderr=subprocess.PIPE).decode().strip()
            last_file = subprocess.check_output(f"ls -1 {directory} | egrep '{filename}\\.[0-9]{{6}}\\.exr' | sort | tail -1", shell=True, stderr=subprocess.PIPE).decode().strip()
        except Exception as e:
            logger.error(f"Error checking for files in the directory {directory}: {e}")
            exit(1)

        if not first_file or not last_file:
            logger.error(f"Error checking for files in the directory {directory}. Exiting.")
            exit(1)
        logger.info(f"First file: {first_file} and last file: {last_file} in the directory {directory}")
        first_number = re.search(r'\.([0-9]+)\.exr', first_file)
        last_number = re.search(r'\.([0-9]+)\.exr', last_file)
        if first_number is not None:
            first_number = first_number.group(1).lstrip('0')
        if last_number is not None:
            last_number = last_number.group(1).lstrip('0')


        footage_path = (str(replacement_string_no_ext) + ".######" + str(extension)).replace('\n', '')
        replacement_path = f"file {footage_path}"

        replacement_dict = {
            # "url": url,
            "first frame": f"first {first_number}",
            "last frame": f"last {last_number}",
            "origfirst frame": f"origfirst {first_number}",
            "origlast frame": f"origlast {last_number}",
            "file path": f"file {footage_path}"
        }
        log_message = "Replacing "
        for key, value in replacement_dict.items():
            log_message += f"{key} with {value}, "
        log_message = log_message.rstrip(", ")  # remove the trailing comma and space
        logger.info(log_message)
        try:
            # edit_nk_files(nk_file, url, replacement_string, search_string1, replacement_first, search_string2, replacement_last, search_string3, replacement_origfirst, search_string4, replacement_origlast)
            edit_nk_files(nk_file, replacement_dict)
        except Exception as e:
            logger.error(f"Error editing the .nk file: {e}")
            exit(1)



# Prompt for user input
initial = input("--------Do you want create based on set job, or create manually with shotlist (J/m): ")
if initial.lower() in ["j", ""]:
    
    user_input = os.getenv("JOB_CURRENT")
    if not user_input:
        logger.error(f"Environment variable JOB_CURRENT not set")
        exit(1)
    prefix = os.getenv("JOB_ASSET_TYPE")
    if not prefix:
        logger.error(f"Environment variable JOB_ASSET_TYPE not set")
        exit(1)
    match = os.getenv("JOB_ASSET_NAME")
    entry = match
    
    if not match:
        logger.error(f"Environment variable JOB_ASSET_NAME not set")
        exit(1)
    logger.info(f"Using JOB_CURRENT: {user_input}, JOB_ASSET_TYPE: {prefix}, JOB_ASSET_NAME: {match}")
else:

    user_input = input("--------Enter your project name (e.g., kleks): ")


source_file = "template.nk"
logger.info('Loading source template file template.nk from the current directory')
# make sure the file exists
if not os.path.exists(source_file):
    logger.error(f"File {source_file} does not exist")
    exit(1)
search_string = f"./PROD/{user_input}/{user_input}/{user_input}/edit/footage/"
choice = input(f"--------Do you want to use the default URL (Y/n) for footage? - {search_string} : ")

# Check if the user chose the default URL or wants to provide their own
if choice.lower() in ["y", ""]:
    url = search_string
else:
    url = input("--------Enter your own URL: ")

logger.info(f"Selected URL: {url}")

# Check if the URL ends with a forward slash
if url[-1] != '/':
    url += '/'
# check if the url is valid and there are files in the directory
# give extension of the files to search for
extension = input("--------Enter the extension of the files to search for (e.g., .exr): ")  
try:
    if os.path.exists(url):
        total_files = 0
        # check recursively for .exr files in the directory
        exr_files = [file for file in os.listdir(url) if file.endswith('.' + extension.lstrip('.').lower())]
        num_files = len(exr_files)
        total_files += num_files
        logger.info(f"Found {num_files} files in the directory {url} with extension {extension}")
        # for each directory, count the number of files
        def count_files_in_directory(directory):
            num_files = 0
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.' + extension.lstrip('.').lower()):
                        num_files += 1
            return num_files

        for root, dirs, files in os.walk(url):
            for dir in dirs:
                dir_path = os.path.join(root, dir)
                num_files = count_files_in_directory(dir_path)
                total_files += num_files
                logger.info(f"Found {num_files} files in the directory {dir_path} with extension {extension}")

        if total_files == 0:
            logger.info("No files found with the specified extension. Exiting.")
            exit(1)
    else:
        logger.info(f"{url} - directory not found")
        exit(1)
    
except subprocess.CalledProcessError:
    logger.info(f"No files found in the directory {url}")
    exit(1)
    
# Read data from a shot list file (assuming the file is named shotlist.txt)
if initial.lower() not in ["J", ""]:
    try:
        with open('shotlist.csv', 'r') as file:
            for entry in file:
                # match = re.match(r'^(s[0-9]+)apk([0-9]+)$', entry.strip())
                
                regex = generate_regex(entry)
                match = re.match(regex, entry.strip())
                print(match)
                if match:
                    # Extract the prefix and the filename using regex capture groups
                    prefix = match.group(1)
                    if prefix:
                        create(prefix, match, entry, source_file, url, extension, user_input)
                    
    except FileNotFoundError:
        logger.error("File shotlist.csv does not exist")
        exit(1)
else:
    create(prefix, match, entry, source_file, url, extension, user_input)